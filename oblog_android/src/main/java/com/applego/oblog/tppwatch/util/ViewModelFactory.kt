package com.applego.oblog.tppwatch.util

import androidx.lifecycle.ViewModel
import androidx.lifecycle.ViewModelProvider
import androidx.lifecycle.ViewModelStore
import androidx.lifecycle.ViewModelStoreOwner
import com.applego.oblog.tppwatch.about.AboutViewModel
import com.applego.oblog.tppwatch.addedittpp.AddEditTppViewModel
import com.applego.oblog.tppwatch.addedittppapp.AddEditTppAppViewModel
import com.applego.oblog.tppwatch.data.repository.TppsRepository
import com.applego.oblog.tppwatch.onboarding.OnboardingViewModel
import com.applego.oblog.tppwatch.statistics.StatisticsViewModel
import com.applego.oblog.tppwatch.tppdetail.AppsViewModel
import com.applego.oblog.tppwatch.tppdetail.TppDetailViewModel
import com.applego.oblog.tppwatch.tpps.TppsViewModel

/**
 * ViewModel Factory - keeps map of all ViewModels for given environment.
 * Current implementation holds single environment only, hence ViewModelStore map must be reset on environment change.
 *
 * This class extends ViewModelProvider.NewInstanceFactory. It would be handy to extend ViewModelProvider.KeyedFactory
 * to use the same keys as generated by the ViewModelProvidier and avoid key related issuse,
 * but unfortunately the KeyedFactory abstract class is not public and we are not in the androidx.lifecycle package.
 */
@Suppress("UNCHECKED_CAST")
class ViewModelFactory constructor(
        var tppsRepository: TppsRepository
) : ViewModelProvider.NewInstanceFactory(), ViewModelStoreOwner {

    fun reset(repository: TppsRepository) {
        tppsRepository = repository

        oblogViewModelStore.clear()
    }

/*
    fun <T : ViewModel> get(modelClass: Class<T>) =
            with(modelClass) {
                var model: ViewModel? = oblogViewModelStore.get(modelClass.name)
                if (model == null) {
                    model = create(modelClass)
                }
                model
            }
*/

    /**
     * OblogViewModelStore is needed becasue the default ViewModelStore set by the ViewModelProvider
     * can't be used from outside the ViewModelProvider package: internam mMap is final private and
     * access methods get and put have package visibility only.
     */
    class OblogViewModelStore<T : ViewModel> : ViewModelStore() {
        /**
         * We need to duplicate the map in order to allow access from both, the ViewModelProvider and our ViewModelFactory,
         * since the default ViewModelStore get and put are not only package private but also final and can't be overridden.
         */
        private val models = HashMap<String, ViewModel>()

        fun <T : ViewModel> put(key: String, viewModel: T) {
            //super.put(key, viewModel)
            models.put(key, viewModel)
        }

        fun get(key: String): ViewModel? =
            with(key) {
                return models.get(key)
            }
    }

    val oblogViewModelStore = ViewModelStore()

    override fun <T : ViewModel> create(modelClass: Class<T>) =
            with(modelClass) {

                var model : ViewModel
                when {
                    isAssignableFrom(StatisticsViewModel::class.java) -> {
                        model = StatisticsViewModel(tppsRepository)
                        model
                    }
                    isAssignableFrom(TppDetailViewModel::class.java) -> {
                        model = TppDetailViewModel(tppsRepository)
                        model
                    }
                    isAssignableFrom(AppsViewModel::class.java) -> {
                        model = AppsViewModel(tppsRepository)
                        model
                    }
                    isAssignableFrom(AddEditTppViewModel::class.java) -> {
                        model = AddEditTppViewModel(tppsRepository)
                        model
                    }
                    isAssignableFrom(AddEditTppAppViewModel::class.java) -> {
                        model = AddEditTppAppViewModel(tppsRepository)
                        model
                    }
                    isAssignableFrom(TppsViewModel::class.java) -> {
                        model = TppsViewModel(tppsRepository)
                        model
                    }
                    isAssignableFrom(AboutViewModel::class.java) -> {
                        model = AboutViewModel()
                        model
                    }
                    isAssignableFrom(OnboardingViewModel::class.java) -> {
                        model = OnboardingViewModel()
                        model
                    }
                    else -> {
                        throw IllegalArgumentException("Unknown ViewModel class: ${modelClass.name}")
                    }
                }
            } as T

    override fun getViewModelStore(): ViewModelStore {
        return oblogViewModelStore
    }

    companion object {
        val viewModelFactory = ViewModelFactory(ServiceLocator.tppsRepository!!)
    }
}
