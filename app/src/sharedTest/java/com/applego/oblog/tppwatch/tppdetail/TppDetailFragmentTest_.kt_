
package com.applego.oblog.tppwatch.tppdetail

import androidx.fragment.app.testing.launchFragmentInContainer
import androidx.test.espresso.Espresso.onView
import androidx.test.espresso.assertion.ViewAssertions.matches
import androidx.test.espresso.matcher.ViewMatchers.isChecked
import androidx.test.espresso.matcher.ViewMatchers.isDisplayed
import androidx.test.espresso.matcher.ViewMatchers.withId
import androidx.test.espresso.matcher.ViewMatchers.withText
import androidx.test.ext.junit.runners.AndroidJUnit4
import androidx.test.filters.MediumTest
import com.applego.oblog.tppwatch.R
import com.applego.oblog.tppwatch.ServiceLocator
import com.applego.oblog.tppwatch.data.model.Tpp
import com.applego.oblog.tppwatch.data.source.FakeRepository
import com.applego.oblog.tppwatch.data.repository.TppsRepository
import com.applego.oblog.tppwatch.util.saveTppBlocking
import kotlinx.coroutines.ExperimentalCoroutinesApi
import kotlinx.coroutines.test.runBlockingTest
import org.hamcrest.core.IsNot.not
import org.junit.After
import org.junit.Before
import org.junit.Ignore
import org.junit.Test
import org.junit.runner.RunWith

/**
 * Integration test for the Tpp Details screen.
 */
@MediumTest
@RunWith(AndroidJUnit4::class)
@ExperimentalCoroutinesApi
class TppDetailFragmentTest_ {

    private lateinit var repository: TppsRepository

    @Before
    fun initRepository() {
        repository = FakeRepository()
        ServiceLocator.tppsRepository = repository
    }

    @After
    fun cleanupDb() = runBlockingTest {
        ServiceLocator.resetRestDataSource()
    }

    //@Test
    fun usedTppDetails_DisplayedInUi() {
        // GIVEN - Add used (unfollow) ebaEntity to the DB
        val usedTpp = Tpp("Entity_CZ28173281", "Used Tpp", "AndroidX Rocks")
        repository.saveTppBlocking(usedTpp)

        // WHEN - Details fragment launched to display ebaEntity
        val bundle = TppDetailFragmentArgs(usedTpp.id).toBundle()
        launchFragmentInContainer<TppDetailFragment>(bundle, R.style.AppTheme)

        // THEN - Tpp details are displayed on the screen
        // make sure that the title/description are both shown and correct
        onView(withId(R.id.tpp_title_text)).check(matches(isDisplayed()))
        onView(withId(R.id.tpp_title_text)).check(matches(withText("Used Tpp")))
        onView(withId(R.id.tpp_entity_code)).check(matches(isDisplayed()))
        onView(withId(R.id.tpp_entity_code)).check(matches(withText("Entity_CZ28173281")))
        // and make sure the "used" checkbox is shown unchecked
        onView(withId(R.id.tpp_detail_follow_checkbox)).check(matches(isDisplayed()))
        onView(withId(R.id.tpp_detail_follow_checkbox)).check(matches(not(isChecked())))
    }

    //@Test
    //@Ignore
    fun followedTppDetails_DisplayedInUi() {
        // GIVEN - Add followed ebaEntity to the DB
        var followedTpp = Tpp("Entity_CZ28173281", "Followed Tpp", "AndroidX Rocks")
        followedTpp.isFollowed = true
        followedTpp.isUsed = true
        repository.saveTppBlocking(followedTpp)

        // WHEN - Details fragment launched to display ebaEntity
        val bundle = TppDetailFragmentArgs(followedTpp.id).toBundle()
        launchFragmentInContainer<TppDetailFragment>(bundle, R.style.AppTheme)

        // THEN - Tpp details are displayed on the screen
        // make sure that the title/description are both shown and correct
        onView(withId(R.id.tpp_title_text)).check(matches(isDisplayed()))
        onView(withId(R.id.tpp_title_text)).check(matches(withText("Followed Tpp")))
        // TODO: Fix following assertions
        onView(withId(R.id.tpp_entity_code)).check(matches(isDisplayed()))
        //onView(withId(R.id.tpp_entity_code)).check(matches(withText("Entity_CZ28173281")))

        // and make sure the "used" checkbox is shown unchecked
        onView(withId(R.id.tpp_detail_used_checkbox)).check(matches(isDisplayed()))
        onView(withId(R.id.tpp_detail_used_checkbox)).check(matches(isChecked()))
        // and make sure the "follow" checkbox is shown unchecked
        onView(withId(R.id.tpp_detail_follow_checkbox)).check(matches(isDisplayed()))
        onView(withId(R.id.tpp_detail_follow_checkbox)).check(matches(isChecked()))
    }
}
